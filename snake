.equ HEAD_X,     0x1000 ; snake head's position on x-axis
.equ HEAD_Y,     0x1004 ; snake head's position on y-axis
.equ TAIL_X,     0x1008 ; snake tail's position on x-axis
.equ TAIL_Y,     0x100C ; snake tail's position on y-axis
.equ SCORE,      0x1010 ; score address
.equ GSA,        0x1014 ; game state array
.equ LEDS,       0x2000 ; LED addresses
.equ SEVEN_SEGS, 0x1198 ; 7-segment display addresses
.equ RANDOM_NUM, 0x2010 ; Random number generator address
.equ BUTTONS,    0x2030 ; Button addresses

;ldw t1, SCORE (zero) ; load the score in t1



call clear_leds
addi a0,r0,3 ; x = 3
addi a1,r0,4 ; y = 4
call set_pixel

addi a0,r0,2 ; x = 4
addi a1,r0,4 ; y = 4
call set_pixel

; BEGIN:clear_leds
clear_leds:
; put LEDS[0..2] to 0x00000000
stw zero, LEDS(zero) ; Set LEDS[0] to 0
stw zero, LEDS+4(zero) ; Set LEDS[1] to 0
stw zero, LEDS+8(zero) ; Set LEDS[2] to 0
ret
; END:clear_leds


; BEGIN:set_pixel
set_pixel:
; ao:x and a1:y
andi t0,a0,12 ; bits[3..2] de x
andi t1,a0,3 ; bits[1..0] de x
slli t2, t1,3 ;shift de 3 à gauche pour multiplier par 8 
add t3, a1,t2 ; t3 est la position du bit voulu a 1
addi t4,zero,1 ; vaut 1 que l'on va shifter de t3 positions
sll t4, t4, t3
ldw t5, LEDS(t0) ; On recupere la valeur initial du tableau de led
or t5,t5,t4 ; on ajoute le led
stw t5, LEDS(t0) ; Set LEDS[1] to 0
ret
; END:set_pixel


; BEGIN:draw_array
draw_array:
; your implementation code
ret
; END:draw_array


; BEGIN:get_input
get_input:
; your implementation code
ret
; END:get_input


; BEGIN:move_snake
move_snake:
; your implementation code
ret
; END:move_snake


; BEGIN:create_food
create_food:
; your implementation code
ret
; END:create_food


; BEGIN:hit_test
hit_test:
; your implementation code
ret
; END:hit_test


; BEGIN:display_score
display_score:
; your implementation code
ret
; END:display_score


; BEGIN:restart_game
restart_game:
; your implementation code
ret
; END:restart_game
